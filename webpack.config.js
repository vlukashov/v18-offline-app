/**
 * This file has been autogenerated as it didn't exist or was made for an older
 * incompatible version.
 *
 * This file can be used for manual configuration. It will not be modified
 * if the flowDefaults constant exists.
 */
const merge = require('webpack-merge');
const flowDefaults = require('./webpack.generated.js');
const { InjectManifest } = require('workbox-webpack-plugin');
const glob = require('glob');
const crypto = require('crypto');
const path = require('path');

const hash = (file) => {
  return crypto.createHash('md5').update(Buffer.from(file)).digest('hex');
};

const include = (manifest, globPattern) => {
  const globDirectory = 'src/main/resources/static';

  const files = glob.sync(globPattern, {
    cwd: globDirectory,
    nodir: true,
  });
  files.forEach((file) => {
    // Add each file with the contents hash as the revision. Without a revision, the file can never be updated.
    manifest.push({ url: file, revision: hash(path.resolve(__dirname, file)) });
  });
};

const manifestTransform = (manifestEntries) => {
  // If anything needs to be propagated to webpack's list
  // of compilation warnings, add the message here:
  const warnings = [];
  const manifest = manifestEntries;

  // `index.html` is a special case: in contrast with the JS bundles produced by webpack
  // it's not served as-is directly from the webpack output at `/VAADIN/index.html`.
  // It goes through IndexHtmlRequestHandler and is served at `/`.
  //
  // TODO: calculate the revision based on the IndexHtmlRequestHandler-processed content
  // of the index.html file
  const indexEntryIdx = manifest.findIndex(entry => entry.url === 'VAADIN/index.html');
  manifest[indexEntryIdx].url = 'index.html';

  include(manifest, '*.*');
  include(manifest, 'my-icons/**');
  include(manifest, 'images/**');

  return { manifest, warnings };
};

/**
 * To change the webpack config, add a new configuration object in
 * the merge arguments below:
 */
module.exports = merge(flowDefaults,
  // Override default configuration
  // {
  //   mode: 'development',
  //   devtool: 'inline-source-map',
  // },

  // Add a custom plugin
  // (install the plugin with `npm install --save-dev webpack-bundle-analyzer`)
  // {
  //   plugins: [
  //     new require('webpack-bundle-analyzer').BundleAnalyzerPlugin({
  //       analyzerMode: 'static'
  //     })
  //   ]
  // },
  {
    plugins: [
      new InjectManifest({
        // Vaadin apps should generate as few as possible 'extra' files in the project folder.
        // There should be no `sw.js` file in the project if its content is fully auto-generated.
        // There should still be a way for developers to add their own sw.js file to customise the Vaadin defaults.
        // TODO: find a way to avoid generating the sw.js file
        swSrc: path.resolve(__dirname, 'sw.js'),
        swDest: 'build/sw.js',
        manifestTransforms: [manifestTransform],
        maximumFileSizeToCacheInBytes: 100 * 1024 * 1024,
      }),
    ]
  },
);
